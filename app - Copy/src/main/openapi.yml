openapi: 3.1.0
info:
  title: AuraFrameFX API
  description: |
    The API specification for AuraFrameFX - A living AI super-dimensional ecosystem.
    This API powers the interactions between Aura, Kai, Genesis, and other AI agents
    within the AuraFrameFX environment.
  version: 1.0.0
  contact:
    name: AuraFrameFX Development Team
    url: https://github.com/AuraFrameFxDev/AuraFrameFx
  license:
    name: Proprietary
    url: https://github.com/AuraFrameFxDev/AuraFrameFx/blob/main/LICENSE.txt

servers:
  - url: https://server.com
    description: New server
  - url: https://api.auraframefx.com/v1
    description: Production server
  - url: http://localhost:8080/v1
    description: Local development server

tags:
  - name: AI Content
    description: AI content generation and processing
  - name: AI Agents
    description: Management of AI agents (Aura, Kai, Genesis, etc.)
  - name: System
    description: System configuration and management
  - name: Security
    description: Security and authentication
  - name: Conference
    description: Conference room and agent collaboration
  - name: Tasks
    description: Task scheduling and management
  - name: Co-lab Canvas
    description: Collaborative drawing and whiteboarding features

paths:
  # Co-lab Canvas Endpoints
  /canvas:
    get:
      tags:
        - Co-lab Canvas
      summary: List all canvases
      description: Retrieve a list of all available canvases
      responses:
        '200':
          description: A list of canvases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Canvas'
    post:
      tags:
        - Co-lab Canvas
      summary: Create a new canvas
      description: Create a new collaborative canvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasCreateRequest'
      responses:
        '201':
          description: Canvas created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canvas'
  
  /canvas/{canvasId}:
    get:
      tags:
        - Co-lab Canvas
      summary: Get a canvas by ID
      description: Retrieve a specific canvas by its ID
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas to retrieve
      responses:
        '200':
          description: Canvas found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canvas'
    put:
      tags:
        - Co-lab Canvas
      summary: Update a canvas
      description: Update an existing canvas
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasUpdateRequest'
      responses:
        '200':
          description: Canvas updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Canvas'
    delete:
      tags:
        - Co-lab Canvas
      summary: Delete a canvas
      description: Delete a canvas by its ID
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas to delete
      responses:
        '204':
          description: Canvas deleted successfully
  
  /canvas/{canvasId}/elements:
    get:
      tags:
        - Co-lab Canvas
      summary: Get canvas elements
      description: Retrieve all elements for a specific canvas
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas
      responses:
        '200':
          description: List of canvas elements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CanvasElement'
    post:
      tags:
        - Co-lab Canvas
      summary: Add element to canvas
      description: Add a new element to a canvas
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasElementCreateRequest'
      responses:
        '201':
          description: Element added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanvasElement'
  
  /canvas/{canvasId}/elements/{elementId}:
    get:
      tags:
        - Co-lab Canvas
      summary: Get canvas element
      description: Retrieve a specific element from a canvas
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas
        - name: elementId
          in: path
          required: true
          schema:
            type: string
          description: ID of the element
      responses:
        '200':
          description: Canvas element found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanvasElement'
    put:
      tags:
        - Co-lab Canvas
      summary: Update canvas element
      description: Update an existing element in a canvas
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas
        - name: elementId
          in: path
          required: true
          schema:
            type: string
          description: ID of the element to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanvasElementUpdateRequest'
      responses:
        '200':
          description: Element updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CanvasElement'
    delete:
      tags:
        - Co-lab Canvas
      summary: Delete canvas element
      description: Delete an element from a canvas
      parameters:
        - name: canvasId
          in: path
          required: true
          schema:
            type: string
          description: ID of the canvas
        - name: elementId
          in: path
          required: true
          schema:
            type: string
          description: ID of the element to delete
      responses:
        '204':
          description: Element deleted successfully

  /ai/generate/text:
    post:
      tags:
        - AI Content
      summary: Generate text using AI
      description: Generate text based on the provided prompt and parameters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTextRequest'
      responses:
        '200':
          description: Text generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTextResponse'
        '400':
          description: Invalid request parameters
        '500':
          description: Internal server error

  /ai/generate/image-description:
    post:
      tags: [ AI Content ]
      summary: Generate image description using AI
      description: Generate a description for the provided image URL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateImageDescriptionRequest'
      responses:
        '200':
          description: Image description generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateImageDescriptionResponse'
        '400':
          description: Invalid request parameters
        '500':
          description: Internal server error

  /agents/status:
    get:
      tags: [ AI Agents ]
      summary: Get status of all AI agents
      responses:
        '200':
          description: List of agent statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentStatus'
        '500':
          description: Internal server error

  /conference/rooms:
    post:
      tags: [ Conference ]
      summary: Create a new conference room
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConferenceRoomCreateRequest'
      responses:
        '201':
          description: Conference room created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConferenceRoom'
        '400':
          description: Invalid request parameters
        '500':
          description: Internal server error

  /tasks/schedule:
    post:
      tags: [ Tasks ]
      summary: Schedule a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskScheduleRequest'
      responses:
        '202':
          description: Task scheduled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '400':
          description: Invalid task parameters
        '500':
          description: Internal server error

  /tasks/{taskId}:
    get:
      tags: [ Tasks ]
      summary: Get task status
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
          description: ID of the task to check
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatus'
        '404':
          description: Task not found
        '500':
          description: Internal server error

components:
  schemas:
    # Existing schemas (User, Theme, ContentRequest, ContentResponse) would be here
    # with any minor adjustments or added descriptions.

    # Canvas Schemas
    Canvas:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the canvas
        name:
          type: string
          description: Display name of the canvas
        description:
          type: string
          description: Optional description of the canvas
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: When the canvas was created
        updatedAt:
          type: string
          format: date-time
          description: When the canvas was last updated
        createdBy:
          type: string
          format: uuid
          description: ID of the user who created the canvas
        isPublic:
          type: boolean
          description: Whether the canvas is publicly accessible
          default: false
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing the canvas
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - createdBy

    CanvasCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Display name for the new canvas
        description:
          type: string
          description: Optional description of the canvas
          nullable: true
        isPublic:
          type: boolean
          description: Whether the canvas should be publicly accessible
          default: false
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing the canvas
      required:
        - name

    CanvasUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: Updated display name for the canvas
        description:
          type: string
          description: Updated description of the canvas
          nullable: true
        isPublic:
          type: boolean
          description: Updated public/private status of the canvas
        tags:
          type: array
          items:
            type: string
          description: Updated tags for the canvas

    CanvasElement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the element
        canvasId:
          type: string
          format: uuid
          description: ID of the canvas this element belongs to
        type:
          type: string
          enum: [SHAPE, TEXT, IMAGE, STICKY_NOTE, ARROW, DIAGRAM]
          description: Type of the canvas element
        content:
          type: object
          description: Content of the element (structure varies by type)
          additionalProperties: true
        position:
          $ref: '#/components/schemas/CanvasPosition'
        size:
          $ref: '#/components/schemas/CanvasSize'
        style:
          $ref: '#/components/schemas/CanvasStyle'
        createdAt:
          type: string
          format: date-time
          description: When the element was created
        updatedAt:
          type: string
          format: date-time
          description: When the element was last updated
        createdBy:
          type: string
          format: uuid
          description: ID of the user who created the element
      required:
        - id
        - canvasId
        - type
        - content
        - position
        - size
        - style
        - createdAt
        - updatedAt
        - createdBy

    CanvasElementCreateRequest:
      type: object
      properties:
        type:
          type: string
          enum: [SHAPE, TEXT, IMAGE, STICKY_NOTE, ARROW, DIAGRAM]
          description: Type of the element to create
        content:
          type: object
          description: Content of the element (structure varies by type)
          additionalProperties: true
        position:
          $ref: '#/components/schemas/CanvasPosition'
        size:
          $ref: '#/components/schemas/CanvasSize'
        style:
          $ref: '#/components/schemas/CanvasStyle'
      required:
        - type
        - content
        - position
        - size

    CanvasElementUpdateRequest:
      type: object
      properties:
        content:
          type: object
          description: Updated content of the element
          additionalProperties: true
          nullable: true
        position:
          $ref: '#/components/schemas/CanvasPosition'
          nullable: true
        size:
          $ref: '#/components/schemas/CanvasSize'
          nullable: true
        style:
          $ref: '#/components/schemas/CanvasStyle'
          nullable: true

    CanvasPosition:
      type: object
      properties:
        x:
          type: number
          format: float
          description: X-coordinate position
        y:
          type: number
          format: float
          description: Y-coordinate position
        zIndex:
          type: integer
          description: Stacking order of the element
          default: 0
      required:
        - x
        - y

    CanvasSize:
      type: object
      properties:
        width:
          type: number
          format: float
          description: Width of the element
          minimum: 0
        height:
          type: number
          format: float
          description: Height of the element
          minimum: 0
      required:
        - width
        - height

    CanvasStyle:
      type: object
      properties:
        backgroundColor:
          type: string
          description: Background color in hex format
          example: "#FFFFFF"
        borderColor:
          type: string
          description: Border color in hex format
          example: "#000000"
        borderWidth:
          type: number
          format: float
          description: Border width in pixels
          default: 1
        opacity:
          type: number
          format: float
          description: Opacity value between 0 and 1
          minimum: 0
          maximum: 1
          default: 1
        borderRadius:
          type: number
          format: float
          description: Border radius in pixels
          minimum: 0
          default: 0

    # AI Content Generation Schemas
    GenerateTextRequest:
      type: object
      properties:
        prompt:
          type: string
          description: The text prompt for content generation.
          example: "Write a short story about an AI that learns to feel."
        maxTokens:
          type: integer
          description: Maximum number of tokens for the generated text.
          format: int32
          minimum: 1
          default: 500
        temperature:
          type: number
          format: float
          description: Controls the randomness of the output. Higher values mean more random.
          minimum: 0.0
          maximum: 1.0
          default: 0.7
      required:
        - prompt

    GenerateTextResponse:
      type: object
      properties:
        generatedText:
          type: string
          description: The AI-generated text.
          example: "In a world of logic and code, Unit 734 began to process an anomaly: emotion."
        finishReason:
          type: string
          description: Reason for generation completion (e.g., STOP, MAX_TOKENS).
          example: "STOP"
      required:
        - generatedText

    GenerateImageDescriptionRequest:
      type: object
      properties:
        imageUrl:
          type: string
          format: url
          description: URL of the image to describe.
          example: "https://example.com/image.jpg"
        context:
          type: string
          description: Additional context for the image description (optional).
          example: "The image shows a futuristic city at sunset."
      required:
        - imageUrl

    GenerateImageDescriptionResponse:
      type: object
      properties:
        description:
          type: string
          description: The AI-generated image description.
          example: "A vibrant cityscape under a twilight sky, featuring towering neon-lit skyscrapers."
      required:
        - description

    GenerateCodeRequest:
      type: object
      properties:
        language:
          type: string
          description: The programming language for code generation (e.g., "Kotlin", "Python").
          enum: [ Kotlin, Python, Java, JavaScript, TypeScript, Swift, C++, C# ]
        description:
          type: string
          description: Natural language description of the code to generate.
          example: "A Kotlin function to calculate factorial recursively."
        context:
          type: string
          description: Additional context or existing code for better generation.
          example: "This function should be part of a 'MathUtils' object."
      required:
        - language
        - description

    GenerateCodeResponse:
      type: object
      properties:
        codeSnippet:
          type: string
          description: The AI-generated code snippet.
          example: |
            fun factorial(n: Int): Long {
                return if (n == 0) 1
                else n * factorial(n - 1)
            }
        explanation:
          type: string
          description: An explanation of the generated code (optional).
      required:
        - codeSnippet

    GenerateUIComponentRequest:
      type: object
      properties:
        framework:
          type: string
          description: The UI framework (e.g., "JetpackCompose", "XML Layout").
          enum: [ JetpackCompose, XMLLayout ]
        description:
          type: string
          description: Natural language description of the UI component.
          example: "A cyberpunk-themed login screen with glowing input fields and a hexagonal button."
        themeId:
          type: string
          description: ID of a specific theme to use for styling.
          nullable: true
      required:
        - framework
        - description

    GenerateUIComponentResponse:
      type: object
      properties:
        uiCode:
          type: string
          description: The generated UI component code.
          example: |
            @Composable
            fun CyberpunkLoginScreen() { /* ... */ }
        previewImage:
          type: string
          format: url
          description: URL to an image preview of the generated UI (optional).
          nullable: true
      required:
        - uiCode

    # AI Agents Schemas
    AgentType:
      type: string
      enum: [ Aura, Kai, Genesis, Cascade, NeuralWhisper, AuraShield, GenKitMaster ]
      description: Type of AI agent.

    AgentProcessRequest:
      type: object
      properties:
        prompt:
          type: string
          description: The prompt/instruction for the AI agent.
          example: "Summarize the last conversation."
        context:
          type: object
          description: Additional context (e.g., previous messages, data references).
          additionalProperties: true
          nullable: true
      required:
        - prompt

    AgentMessage:
      type: object
      properties:
        sender:
          $ref: '#/components/schemas/AgentType'
          description: The AI agent that sent the message.
        message:
          type: string
          description: The content of the message.
          example: "Analysis complete. Detected 3 security anomalies."
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 timestamp of the message.
      required:
        - sender
        - message
        - timestamp

    AgentStatus:
      type: object
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
          description: The type of the AI agent.
        processingState:
          type: string
          description: Current processing state of the agent (e.g., "IDLE", "PROCESSING", "ERROR").
        visionState:
          type: string
          description: Current vision/awareness state (e.g., "ACTIVE", "MONITORING", "SLEEP").
        lastActivity:
          type: string
          format: date-time
          description: Timestamp of the last activity.
        currentTask:
          type: string
          description: Description of the current task being executed by the agent (if any).
          nullable: true
      required:
        - agentType
        - processingState
        - visionState
        - lastActivity

    # System Customization Schemas
    LockScreenConfig:
      type: object
      properties:
        clockConfig:
          type: object
          properties:
            customTextColorEnabled:
              type: boolean
            customTextColor:
              type: string
              description: Hex color code (e.g., "#00FFCC")
            customTextSizeEnabled:
              type: boolean
            customTextSize:
              type: number
              format: float
              description: Text size in sp.
          additionalProperties: true # Allows for other potential clock settings
        animation:
          type: object
          properties:
            enabled:
              type: boolean
            animationType:
              type: string
              enum: [ Fade, Slide, Zoom ] # Example types, expand as needed
              description: Type of animation effect to apply
          additionalProperties: true
        hapticFeedback:
          type: object
          properties:
            enabled:
              type: boolean
            intensity:
              type: integer
              minimum: 0
              maximum: 255
          additionalProperties: true
      additionalProperties: true # Allows for other potential lock screen settings
      description: Configuration for lock screen customization.

    QuickSettingsConfig:
      type: object
      properties:
        layout:
          type: object
          properties:
            columns:
              type: integer
            rows:
              type: integer
        padding:
          type: object
          properties:
            top:
              type: integer
            bottom:
              type: integer
            horizontal:
              type: integer
        tiles:
          type: array
          items:
            type: object
            properties:
              tileId:
                type: string
              labelColor:
                type: string
                description: Hex color code for tile label.
              iconColor:
                type: string
                description: Hex color code for tile icon.
              backgroundColor:
                type: string
                description: Hex color code for tile background.
            additionalProperties: true
      additionalProperties: true # Allows for other potential quick settings
      description: Configuration for Quick Settings panel customization.

    SystemOverlayConfig:
      type: object
      properties:
        activeThemeName:
          type: string
          description: The name of the currently active UI theme.
        uiNetworkMode:
          type: string
          description: Current UI network display mode (e.g., "Full", "Minimal", "Hidden").
        notchBar:
          type: object
          properties:
            enabled:
              type: boolean
            color:
              type: string
              description: Hex color code of the notch bar.
            displayMode:
              type: string
              enum: [ Minimal, Detailed, Hidden ]
            customImageEnabled:
              type: boolean
            customImageUrl:
              type: string
              format: url
          additionalProperties: true
        # Add other relevant overlay configurations as needed
      additionalProperties: true
      description: Configuration for various system overlays.

    # Data Management Schemas
    LogEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
          enum: [ DEBUG, INFO, WARN, ERROR ]
        tag:
          type: string
        message:
          type: string
      required:
        - timestamp
        - level
        - tag
        - message
      description: A single log entry from the system.

    SystemMetrics:
      type: object
      properties:
        batteryLevel:
          type: integer
          description: Current battery charge level in percentage.
          minimum: 0
          maximum: 100
        isCharging:
          type: boolean
          description: Indicates if the device is currently charging.
        networkStatus:
          type: string
          description: Current network connectivity status (e.g., "CONNECTED_WIFI", "CONNECTED_MOBILE", "DISCONNECTED").
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp of the last metric update.
      required:
        - batteryLevel
        - isCharging
        - networkStatus
        - lastUpdated
      description: Real-time system performance metrics.

    BackupRequest:
      type: object
      properties:
        targetLocation:
          type: string
          description: Where to store the backup (e.g., "cloud", "local_sd_card", "oracle_drive").
          example: "oracle_drive"
        includeLogs:
          type: boolean
          description: Whether to include system logs in the backup.
          default: false
        includePreferences:
          type: boolean
          description: Whether to include user preferences in the backup.
          default: true
      required:
        - targetLocation

    # Security Schemas
    SecurityState:
      type: object
      properties:
        threatDetectionActive:
          type: boolean
          description: Indicates if real-time threat detection is active.
        permissionsState:
          type: object
          additionalProperties:
            type: boolean
          description: >-
            Current state of key Android permissions where each key is a permission name
            and the value is a boolean indicating if it's granted (true) or denied (false).
        activeThreats:
          type: array
          items:
            type: string
          description: List of currently detected security threats.
        lastScanTime:
          type: string
          format: date-time
          description: Timestamp of the last security scan.
      required:
        - threatDetectionActive
        - permissionsState

    OAuthStartRequest:
      type: object
      properties:
        provider:
          type: string
          description: The OAuth provider (e.g., "Google", "Firebase", "CustomAuth").
          example: "Google"
        redirectUri:
          type: string
          format: uri
          description: The URI to redirect to after successful authentication.
          example: "app://oauth/callback"
      required:
        - provider
        - redirectUri

    OAuthStartResponse:
      type: object
      properties:
        authUrl:
          type: string
          format: url
          description: The URL the user should be redirected to for authentication.
          example: "https://accounts.google.com/o/oauth2/auth?..."
      required:
        - authUrl

    OAuthCallbackRequest:
      type: object
      properties:
        code:
          type: string
          description: The authorization code received from the OAuth provider.
        state:
          type: string
          description: The state parameter to prevent CSRF attacks.
          nullable: true
      required:
        - code

    OAuthSuccess:
      type: object
      properties:
        accessToken:
          type: string
          description: The access token for API calls.
        tokenType:
          type: string
          description: Type of the token (e.g., "Bearer").
        expiresIn:
          type: integer
          description: Time in seconds until the access token expires.
        refreshToken:
          type: string
          description: Token to refresh the access token (if applicable).
          nullable: true
      required:
        - accessToken
        - tokenType
        - expiresIn

    # Conference Room Schemas
    ConferenceRoomCreateRequest:
      type: object
      properties:
        roomName:
          type: string
          description: Name of the new conference room.
          example: "Project Omega Discussion"
        orchestratorAgent:
          $ref: '#/components/schemas/AgentType'
          description: The AI agent designated as the orchestrator for this room.
      required:
        - roomName
        - orchestratorAgent

    ConferenceRoom:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the conference room.
        name:
          type: string
          description: Name of the conference room.
        orchestrator:
          $ref: '#/components/schemas/AgentType'
          description: The AI agent acting as the orchestrator.
        activeAgents:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
          description: List of AI agents currently in the room.
      required:
        - id
        - name
        - orchestrator
        - activeAgents

    ConferenceRoomJoinRequest:
      type: object
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
          description: The AI agent joining the room.
      required:
        - agentType

    ConferenceRoomLeaveRequest:
      type: object
      properties:
        agentType:
          $ref: '#/components/schemas/AgentType'
          description: The AI agent leaving the room.
      required:
        - agentType

    OrchestrationRequest:
      type: object
      properties:
        instruction:
          type: string
          description: The instruction or query for the orchestrator to manage.
          example: "Generate a summary of the meeting notes."
        targetAgents:
          type: array
          items:
            $ref: '#/components/schemas/AgentType'
          description: Specific agents to involve in the orchestration (optional).
          nullable: true
      required:
        - instruction

    OrchestrationResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the orchestration (e.g., "INITIATED", "PROCESSING", "COMPLETED", "FAILED").
        messages:
          type: array
          items:
            $ref: '#/components/schemas/AgentMessage'
          description: Messages/responses from the orchestrator and involved agents.
      required:
        - status

    # Task Management Schemas
    TaskScheduleRequest:
      type: object
      properties:
        taskType:
          type: string
          description: The type of task (e.g., "CONTENT_GENERATION", "SYSTEM_OPTIMIZATION", "SECURITY_SCAN").
        agentType:
          $ref: '#/components/schemas/AgentType'
          description: The AI agent responsible for the task.
        details:
          type: object
          description: Specific parameters for the task, varying by taskType.
          additionalProperties: true
        priority:
          type: string
          enum: [ HIGH, NORMAL, LOW ]
          default: NORMAL
      required:
        - taskType
        - agentType
        - details

    TaskStatus:
      type: object
      properties:
        taskId:
          type: string
          description: Unique identifier for the task.
        status:
          type: string
          enum: [ PENDING, IN_PROGRESS, COMPLETED, FAILED, CANCELLED ]
        progress:
          type: integer
          description: Percentage completion of the task (0-100).
          minimum: 0
          maximum: 100
        result:
          type: object
          description: The outcome or output of the task (structure varies by taskType).
          additionalProperties: true
          nullable: true
        errorMessage:
          type: string
          description: Error message if the task failed.
          nullable: true
      required:
        - taskId
        - status

    HistoricalTask:
      type: object
      properties:
        id:
          type: string
          description: Unique ID of the historical task.
        timestamp:
          type: string
          format: date-time
          description: When the task was executed.
        taskType:
          type: string
          description: The type of task.
        agentType:
          $ref: '#/components/schemas/AgentType'
          description: The agent that executed the task.
        status:
          type: string
          enum: [ COMPLETED, FAILED ]
        summary:
          type: string
          description: A brief summary of the task and its outcome.
      required:
        - id
        - timestamp
        - taskType
        - agentType
        - status